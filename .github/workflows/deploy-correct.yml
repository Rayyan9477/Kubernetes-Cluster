name: Build and Deploy to Minikube

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: mern-auth-app
  K8S_NAMESPACE: mern-app
  NODE_ENV: production
  PORT: 5000
  FRONTEND_URL: http://localhost:30007
  VITE_BACKEND_URL: http://localhost:30007/api
  MONGODB_DATABASE: mern-auth

jobs:
  build-deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker to use Minikube's environment
      run: |
        echo "Configuring Docker to use Minikube's daemon..."
        eval $(minikube docker-env)

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker

    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      with:
        context: ./app
        push: true
        tags: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=registry,ref=${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
      uses: docker/build-push-action@v5
        
    - name: Create namespace if not exists
      run: |
        kubectl get namespace ${{ env.K8S_NAMESPACE }} || kubectl apply -f k8s/namespace.yaml

    - name: Create Kubernetes Secrets
      env:
        MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
        MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        # Create MongoDB connection string
        MONGO_URI="mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongodb-service:27017/${{ env.MONGODB_DATABASE }}?authSource=admin"
        
        # Create secrets
        kubectl create secret generic mern-app-secrets \
          --namespace=${{ env.K8S_NAMESPACE }} \
          --from-literal=JWT_SECRET="${JWT_SECRET}" \
          --from-literal=MONGODB_USERNAME="${MONGODB_USERNAME}" \
          --from-literal=MONGODB_PASSWORD="${MONGODB_PASSWORD}" \
          --from-literal=MONGO_URI="${MONGO_URI}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Create ConfigMap
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: mern-app-config
          namespace: ${{ env.K8S_NAMESPACE }}
        data:
          NODE_ENV: "${{ env.NODE_ENV }}"
          PORT: "${{ env.PORT }}"
          FRONTEND_URL: "${{ env.FRONTEND_URL }}"
          VITE_BACKEND_URL: "${{ env.VITE_BACKEND_URL }}"
          MONGODB_DATABASE: "${{ env.MONGODB_DATABASE }}"
        EOF

    - name: Deploy MongoDB
      run: |
        kubectl apply -f k8s/mongodb-deployment.yaml
        kubectl apply -f k8s/mongodb-service.yaml

    - name: Deploy Application
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        # Process deployment template with environment variables
        cat k8s/deployment.yaml | \
          sed "s|\${DOCKER_USERNAME}|${DOCKER_USERNAME}|g" | \
          sed "s|\${PORT}|${{ env.PORT }}|g" | \
          kubectl apply -f -
        
        # Apply service
        cat k8s/service.yaml | \
          sed "s|\${PORT}|${{ env.PORT }}|g" | \
          kubectl apply -f -

    - name: Wait for deployments to be ready
      run: |
        echo "Waiting for MongoDB deployment..."
        kubectl rollout status deployment/mongodb -n ${{ env.K8S_NAMESPACE }}
        
        echo "Waiting for application deployment..."
        kubectl rollout status deployment/mern-auth-app -n ${{ env.K8S_NAMESPACE }}

    - name: Verify deployment
      run: |
        echo "Checking pods..."
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide
        
        echo "Checking services..."
        kubectl get services -n ${{ env.K8S_NAMESPACE }} -o wide
        
        echo "Checking deployments..."
        kubectl get deployments -n ${{ env.K8S_NAMESPACE }} -o wide
        
        echo "Checking nodes..."
        kubectl get nodes -o wide

    - name: Display service URL
      run: |
        echo "Application will be available at:"
        minikube service mern-auth-service -n ${{ env.K8S_NAMESPACE }} --url

    - name: Generate deployment status
      run: |
        mkdir -p documentation/verification
        
        # Generate timestamp
        TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
        
        # Create status report
        echo "Kubernetes Deployment Status Report - $TIMESTAMP" > documentation/verification/deployment-status.txt
        echo "====================================================" >> documentation/verification/deployment-status.txt
        
        echo -e "\nPods:" >> documentation/verification/deployment-status.txt
        kubectl get pods -n ${{ env.K8S_NAMESPACE }} -o wide >> documentation/verification/deployment-status.txt
        
        echo -e "\nServices:" >> documentation/verification/deployment-status.txt
        kubectl get services -n ${{ env.K8S_NAMESPACE }} -o wide >> documentation/verification/deployment-status.txt
        
        echo -e "\nDeployments:" >> documentation/verification/deployment-status.txt
        kubectl get deployments -n ${{ env.K8S_NAMESPACE }} -o wide >> documentation/verification/deployment-status.txt
        
        echo -e "\nNodes:" >> documentation/verification/deployment-status.txt
        kubectl get nodes -o wide >> documentation/verification/deployment-status.txt
        
        echo -e "\nApplication URL:" >> documentation/verification/deployment-status.txt
        minikube service mern-auth-service -n ${{ env.K8S_NAMESPACE }} --url >> documentation/verification/deployment-status.txt
        
        echo "Deployment status report generated at documentation/verification/deployment-status.txt"
